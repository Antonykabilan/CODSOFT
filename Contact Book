import tkinter as tk
from tkinter import messagebox

class ContactBook:
    def __init__(self, root):
        self.root = root
        self.root.title("Contact Book")
        self.root.geometry("400x550")
        self.contacts = []

        # Set theme colors
        self.bg_color = "#F0F0F0"
        self.button_bg = "#FF4C4C"
        self.button_fg = "#FFFFFF"

        self.root.configure(bg=self.bg_color)

        # Configure grid for center alignment
        self.root.grid_rowconfigure(0, weight=1)
        self.root.grid_rowconfigure(10, weight=1)
        self.root.grid_columnconfigure(0, weight=1)
        self.root.grid_columnconfigure(1, weight=1)

        # Create UI components
        self.create_widgets()

    def create_widgets(self):
        # Frame for contact details
        details_frame = tk.Frame(self.root, bg=self.bg_color)
        details_frame.grid(row=1, column=0, columnspan=2, pady=10)

        # Labels and Entries for contact details
        tk.Label(details_frame, text="Name", bg=self.bg_color).grid(row=0, column=0, padx=5, pady=2, sticky="e")
        tk.Label(details_frame, text="Phone Number", bg=self.bg_color).grid(row=1, column=0, padx=5, pady=2, sticky="e")
        tk.Label(details_frame, text="Email", bg=self.bg_color).grid(row=2, column=0, padx=5, pady=2, sticky="e")
        tk.Label(details_frame, text="Address", bg=self.bg_color).grid(row=3, column=0, padx=5, pady=2, sticky="e")

        self.name_entry = tk.Entry(details_frame)
        self.phone_entry = tk.Entry(details_frame)
        self.email_entry = tk.Entry(details_frame)
        self.address_entry = tk.Entry(details_frame)

        self.name_entry.grid(row=0, column=1, padx=5, pady=2)
        self.phone_entry.grid(row=1, column=1, padx=5, pady=2)
        self.email_entry.grid(row=2, column=1, padx=5, pady=2)
        self.address_entry.grid(row=3, column=1, padx=5, pady=2)

        # Buttons for operations
        tk.Button(details_frame, text="Add", command=self.add_contact, bg=self.button_bg, fg=self.button_fg).grid(row=4, column=0, columnspan=2, pady=5, ipadx=20)
        tk.Button(details_frame, text="Update", command=self.update_contact, bg=self.button_bg, fg=self.button_fg).grid(row=5, column=0, columnspan=2, pady=5, ipadx=20)
        tk.Button(details_frame, text="Delete", command=self.delete_contact, bg=self.button_bg, fg=self.button_fg).grid(row=6, column=0, columnspan=2, pady=5, ipadx=20)

        # Search Box Frame
        search_frame = tk.Frame(self.root, bg=self.bg_color)
        search_frame.grid(row=2, column=0, columnspan=2, pady=10)

        tk.Label(search_frame, text="Search", bg=self.bg_color).grid(row=0, column=0, padx=5, pady=2)
        self.search_entry = tk.Entry(search_frame, width=25)
        self.search_entry.grid(row=0, column=1, padx=5, pady=2)
        tk.Button(search_frame, text="Search", command=self.search_contact, bg=self.button_bg, fg=self.button_fg).grid(row=0, column=2, padx=5)

        # Listbox to display contacts
        self.contact_listbox = tk.Listbox(self.root, width=40, height=10)
        self.contact_listbox.grid(row=3, column=0, columnspan=2, pady=10)

    def add_contact(self):
        name = self.name_entry.get()
        phone = self.phone_entry.get()
        email = self.email_entry.get()
        address = self.address_entry.get()

        if name and phone:
            self.contacts.append({"name": name, "phone": phone, "email": email, "address": address})
            self.clear_entries()
            self.view_contacts()
            messagebox.showinfo("Success", "Contact added successfully!")
        else:
            messagebox.showerror("Error", "Name and Phone Number are required fields!")

    def view_contacts(self):
        self.contact_listbox.delete(0, tk.END)
        for contact in self.contacts:
            self.contact_listbox.insert(tk.END, f"{contact['name']} - {contact['phone']}")

    def search_contact(self):
        search_term = self.search_entry.get()
        self.contact_listbox.delete(0, tk.END)
        for contact in self.contacts:
            if search_term.lower() in contact['name'].lower() or search_term in contact['phone']:
                self.contact_listbox.insert(tk.END, f"{contact['name']} - {contact['phone']}")
        if not self.contact_listbox.size():
            self.contact_listbox.insert(tk.END, "No matching contact found.")

    def update_contact(self):
        selected_contact_index = self.contact_listbox.curselection()
        if selected_contact_index:
            selected_contact = self.contacts[selected_contact_index[0]]
            selected_contact["name"] = self.name_entry.get()
            selected_contact["phone"] = self.phone_entry.get()
            selected_contact["email"] = self.email_entry.get()
            selected_contact["address"] = self.address_entry.get()
            self.clear_entries()
            self.view_contacts()
            messagebox.showinfo("Success", "Contact updated successfully!")
        else:
            messagebox.showerror("Error", "Please select a contact to update")

    def delete_contact(self):
        selected_contact_index = self.contact_listbox.curselection()
        if selected_contact_index:
            self.contacts.pop(selected_contact_index[0])
            self.view_contacts()
            messagebox.showinfo("Success", "Contact deleted successfully!")
        else:
            messagebox.showerror("Error", "Please select a contact to delete")

    def clear_entries(self):
        self.name_entry.delete(0, tk.END)
        self.phone_entry.delete(0, tk.END)
        self.email_entry.delete(0, tk.END)
        self.address_entry.delete(0, tk.END)
        self.search_entry.delete(0, tk.END)

if __name__ == "__main__":
    root = tk.Tk()
    app = ContactBook(root)
    root.mainloop()
